{"version":3,"file":"extension.js","mappings":"8bAAA,eAMA,oBAAyBA,GACvBC,EAAOC,UAAUC,yBAA+BC,GAAM,EAAD,gCAEnD,MAAMC,EAAgBJ,EAAOC,UAAUI,mBACjCC,EAAYF,EAAcG,IAAe,uCACzCC,EAAUJ,EAAcG,IAAa,qCACrCE,EAAUN,EAAEO,eAAe,GAC3BC,EAAiBP,EAAcG,IAAc,4CAC7CK,EAAqBR,EAAcG,IAAa,gDAChDM,EAAkBT,EAAcG,IAAa,sDAC7CO,EAAsBV,EAAcG,IAAQ,8BAC5CQ,EAAyBX,EAAcG,IAAa,oDACpDS,EAA8BZ,EAAcG,IAAa,yDAE/D,GACEC,GACAF,GACAG,IACAE,MAAAA,OAAc,EAAdA,EAAgBM,SAASd,EAAEe,SAASC,aAEpC,IAEE,IAAIC,EAAiC,GACrC,IAAKpB,EAAOqB,OAAOC,kBAAyE,IAArDtB,EAAOqB,OAAOC,iBAAiBF,WAAWG,OAC/E,OAEF,IAAK,MAAMC,KAAaxB,EAAOqB,OAAOC,iBAAiBF,WAAY,CACjE,MAAMK,EAAaD,EAAUE,MAAMC,KAC7BC,EAAcnB,EAAQoB,MAAMH,MAAMI,UAClCC,EAAW5B,EAAEe,SAASc,OAAOP,GAAYQ,KAE/C,GAAIL,EAAc,EAChB,OAGF,MAAMM,EAAgB,IAAIlC,EAAOmC,SAASV,EAAYG,EAAc,GAC9DQ,EAAc,IAAIpC,EAAOmC,SAASV,EAAYG,GAE9CS,EAAkBC,EAAcP,EAASQ,UAAU,EAAGX,GAAcY,EAAalC,GAAY,QAASS,GAC5G,GAAIsB,EAAkB,EACpB,OAGF,MAAMI,EAAgBb,EAAc,EAAIU,EAAcP,EAASQ,UAAUX,EAAc,EAAGG,EAASR,QAASiB,EAAalC,GAAY,MAAOS,GAEtI2B,EAAeX,EAASY,MAAMN,EAAkB,EAAGI,GAEnDG,EAAqB,IAAI5C,EAAOmC,SAASV,EAAYY,GACrDQ,EAAmB,IAAI7C,EAAOmC,SAASV,EAAYgB,GAEnDK,EAAY3C,EAAEe,SAAS6B,QAAQ,IAAI/C,EAAOgD,MAAMd,EAAeE,IAC/Da,EAAW9C,EAAEe,SAAS6B,QAAQ,IAAI/C,EAAOgD,MAAMd,EAAcgB,UAAU,EAAG,GAAId,EAAYc,UAAU,EAAG,KACvGC,EAAehD,EAAEe,SAAS6B,QAAQ,IAAI/C,EAAOgD,MAAMd,EAAcgB,UAAU,EAAG,GAAId,EAAYc,UAAU,EAAG,KAEjH,GACEE,EAAYrB,EAAUH,EAAaS,EAAiBI,IACpDV,EAASsB,OAAOhB,KAAqBN,EAASsB,OAAOZ,GACrD,CAEA,MAAMa,EAAQ,IAAIC,OAAO,gNAGnBC,EAAY/B,EAAa,GAAKA,EAAa,GAAK,EAChDgC,EAAUtD,EAAEe,SAASwC,UAAYjC,EAAa,GAAKA,EAAa,GAAKtB,EAAEe,SAASwC,UAIhFC,EAFgBxD,EAAEe,SAAS6B,QAAQ,IAAI/C,EAAOgD,MAAMQ,EAAW,EAAGC,EAAS,MAEnDG,MAAMN,GAEpC,GAAIO,EAAgB9B,EAAUH,EAAaH,EAAYtB,EAAEe,SAAUF,MAAAA,GAAAA,KAC7D0B,EAAazB,SAAS,OACvBJ,IACCJ,EAAQwB,KAAM,CAClB,MAAM6B,EAAO,IAAI9D,EAAO+D,cAsBxB,GApBAD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTJ,EACAA,EAAmBM,eAAUgB,EAAW,IAE5B,WAAd5D,EAAyB,IAAO,KAGlCwD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTH,EACAA,EAAiBK,eAAUgB,EAAW,IAE1B,WAAd5D,EAAyB,IAAO,WAG5BN,EAAOC,UAAUkE,UAAUL,GAE7BpB,EAAa0B,QAAQ,OAAS1B,EAAanB,OAAS,EAAG,CACzD,MAAM8C,EAASrE,EAAOqB,OAAOC,iBAE7B,IAAK+C,EACH,OAGF,MAAMC,EAAWD,EAAO7C,UAAU+C,OAC5BC,EAAcF,EAASG,KAAKH,EAAS3C,KAAMU,EAAkBK,EAAanB,OAAS,GACnFmD,EAAe,IAAI1E,EAAO2E,UAAUH,EAAaA,GAEvDH,EAAO7C,UAAYkD,EAGrB,OAGF,GAAgB,OAAZf,GAAoB/C,GACtB,GAAqB,MAAjBH,EAAQwB,MAA8B,MAAda,EAAmB,CAC7C,MAAMgB,EAAO,IAAI9D,EAAO+D,cACxBD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTJ,EACAA,EAAmBM,eAAUgB,EAAW,IAE1C,KAEFJ,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTH,EACAA,EAAiBK,eAAUgB,EAAW,IAExC,KAEFJ,EAAKc,OACHzE,EAAEe,SAAS+C,IACX,IAAIjE,EAAOmC,SAASV,EAAYG,EAAc,GAC9C,KAEFkC,EAAKc,OACHzE,EAAEe,SAAS+C,IACX,IAAIjE,EAAOmC,SAASV,EAAYgB,GAChC,KAEFqB,EAAKc,OACHzE,EAAEe,SAAS+C,IACX,IAAIjE,EAAOmC,SAASV,EAAYY,EAAkB,GAClD,WAEIrC,EAAOC,UAAUkE,UAAUL,GACjC1C,EAAWyD,KAAK,IAAI7E,EAAO2E,UACzBlD,EACAG,EAAc,EACdH,EACAG,EAAc,SAEX,GAAqB,OAAjBnB,EAAQwB,MAA+B,MAAda,EAAmB,CACrD,MAAMgB,EAAO,IAAI9D,EAAO+D,cACxBD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTJ,EACAA,EAAmBM,eAAUgB,EAAW,IAE1C,KAEFJ,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTH,EACAA,EAAiBK,eAAUgB,EAAW,IAExC,KAEFJ,EAAKc,OACHzE,EAAEe,SAAS+C,IACX,IAAIjE,EAAOmC,SAASV,EAAYgB,GAChC,KAEFqB,EAAKc,OACHzE,EAAEe,SAAS+C,IACX,IAAIjE,EAAOmC,SAASV,EAAYY,EAAkB,GAClD,WAEIrC,EAAOC,UAAUkE,UAAUL,GACjC1C,EAAWyD,KAAK,IAAI7E,EAAO2E,UACzBlD,EACAG,EAAc,EACdH,EACAG,EAAc,UAGb,IACJiC,EAAgB9B,EAAUH,EAAaH,EAAYtB,EAAEe,SAAUF,MAAAA,GAAAA,GAEhE,GAAqB,OAAjBP,EAAQwB,MAA+B,MAAda,IAAsBlB,EAAc,GAA2C,OAArCG,EAASsB,OAAOzB,EAAc,IAAe,CAClH,MAAMkC,EAAO,IAAI9D,EAAO+D,cACxBD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTJ,EACAA,EAAmBM,eAAUgB,EAAW,IAE1C,KAEFJ,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTH,EACAA,EAAiBK,eAAUgB,EAAW,IAExC,WAEIlE,EAAOC,UAAUkE,UAAUL,GACjC1C,EAAWyD,KAAK,IAAI7E,EAAO2E,UACzBlD,EACAG,EAAc,EACdH,EACAG,EAAc,SAEX,GAAqB,MAAjBnB,EAAQwB,MAA8B,MAAda,GAA6C,UAAxBhC,IAAoCc,EAAc,GAA2C,OAArCG,EAASsB,OAAOzB,EAAc,IAAe,CAC3J,MAAMkC,EAAO,IAAI9D,EAAO+D,cACxBD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTJ,EACAA,EAAmBM,eAAUgB,EAAW,IAE1C,KAEFJ,EAAKc,OACHzE,EAAEe,SAAS+C,IACX7B,EAAYc,eAAUgB,EAAW,GACjC,KAEFJ,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTH,EACAA,EAAiBK,eAAUgB,EAAW,IAExC,WAEIlE,EAAOC,UAAUkE,UAAUL,GACjC1C,EAAWyD,KAAK,IAAI7E,EAAO2E,UACzBlD,EACAG,EAAc,EACdH,EACAG,EAAc,SAEX,GAA4B,UAAxBd,GAAiD,MAAdgC,GAAsC,MAAjBrC,EAAQwB,OAAiBL,EAAc,GAA2C,OAArCG,EAASsB,OAAOzB,EAAc,IAAe,CAC3J,MAAMkC,EAAO,IAAI9D,EAAO+D,cACxBD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTJ,EACAA,EAAmBM,eAAUgB,EAAW,IAE1C,KAEFJ,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTH,EACAA,EAAiBK,eAAUgB,EAAW,IAExC,WAEIlE,EAAOC,UAAUkE,UAAUL,GACjC1C,EAAWyD,KAAK,IAAI7E,EAAO2E,UACzBlD,EACAG,EAAc,EACdH,EACAG,EAAc,SAEX,GAAqB,MAAjBnB,EAAQwB,MAAiC,OAAjBkB,IAA0BvB,EAAc,GAA2C,OAArCG,EAASsB,OAAOzB,EAAc,IAAe,CAC5H,MAAMkC,EAAO,IAAI9D,EAAO+D,cACxBD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTJ,EACAA,EAAmBM,eAAUgB,EAAW,IAE1C,KAEFJ,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTH,EACAA,EAAiBK,eAAUgB,EAAW,IAExC,WAEIlE,EAAOC,UAAUkE,UAAUL,GACjC1C,EAAWyD,KAAK,IAAI7E,EAAO2E,UACzBlD,EACAG,EAAc,EACdH,EACAG,EAAc,SAEX,GAAqB,MAAjBnB,EAAQwB,MAA6B,MAAbgB,GAA4C,UAAxBnC,IAAoCc,EAAc,GAA2C,OAArCG,EAASsB,OAAOzB,EAAc,IAAe,CAC1J,MAAMkC,EAAO,IAAI9D,EAAO+D,cACxBD,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTJ,EACAA,EAAmBM,eAAUgB,EAAW,IAE1C,KAEFJ,EAAKc,OACHzE,EAAEe,SAAS+C,IACX7B,EAAYc,eAAUgB,EAAW,GACjC,KAEFJ,EAAKE,QACH7D,EAAEe,SAAS+C,IACX,IAAIjE,EAAOgD,MACTH,EACAA,EAAiBK,eAAUgB,EAAW,IAExC,WAEIlE,EAAOC,UAAUkE,UAAUL,GACjC1C,EAAWyD,KAAK,IAAI7E,EAAO2E,UACzBlD,EACAG,EAAc,EACdH,EACAG,EAAc,MAMpB5B,EAAOqB,OAAOC,kBAAoBF,EAAWG,OAAS,IACxDvB,EAAOqB,OAAOC,iBAAiBF,WAAaA,GAE9C,iBAKR,MAAMgC,EAAc,CAACzB,EAAcmD,EAAmBzC,EAAyB0C,KACzEpD,EAAKY,UAAU,EAAGuC,GAAW7D,SAAS,OACjCU,EAAKY,UAAU,EAAGuC,GAAWV,QAAQ,MAAQ/B,GAAmBV,EAAKY,UAAU,EAAGuC,GAAWV,QAAQ,MAAQW,EAMlHlB,EAAkB,CAAClC,EAAcqD,EAA0BC,EAAoB/D,EAA+BF,KAClH,MAAMkE,EAAavD,EAAKY,UAAU,EAAGyC,GAAkB/D,SAAS,MAAQU,EAAKY,UAAUyC,EAAkBrD,EAAKJ,QAAQN,SAAS,KAC/H,GAAIiE,EAAY,CACd,MAAMC,EAAaxD,EAAKY,UAAU,EAAGyC,GAAkBZ,QAAQ,KACzDgB,EAAWJ,EAAmBrD,EAAKY,UAAUyC,EAAkBrD,EAAKJ,QAAQ6C,QAAQ,KACpFiB,EAAoB1D,EAAKY,UAAU,EAAGyC,GAAkBZ,QAAQ,MAChEkB,EAAkBN,EAAmBrD,EAAKY,UAAUyC,EAAkBrD,EAAKJ,QAAQ6C,QAAQ,KACjG,OAAIpD,GAA+BqE,GAAqB,GAAKC,EAAkB,EACtEH,GAAcE,GAAqBD,GAAYE,EAEjDJ,EACF,CACL,MAAMK,EAAYN,EACZO,EAActE,EAASc,OAAOuD,GAAWtD,KACzCwD,EAAcD,EAAYjD,UAAU,EAAGyC,GACvCU,EAAYF,EAAYjD,UAAUyC,EAAkBrD,EAAKJ,QAC/D,OAAOoE,EAAYJ,EAAWE,EAAavE,EAAU,UAAYyE,EAAYJ,EAAWG,EAAWxE,EAAU,SAI3GyE,EAAc,CAACJ,EAAmBC,EAAqBtE,EAA+BoD,KAI1F,IAFEiB,GAAa,EAEeA,GAAa,GAAoC,CAC7E,MAAMK,EAAWJ,EAAYpB,QAAQ,KAC/ByB,EAAYL,EAAYpB,QAAQ,KAChC0B,EAAQN,EAAYpB,QAAQ,KAClC,GAAIwB,GAAY,GAAKC,GAAa,GAAKA,EAAYD,EACjD,OAAO,EACF,GAAIA,GAAY,GAAKC,GAAa,GAAKA,EAAYD,EACxD,OAAO,EACF,GAAIA,GAAY,GAAKE,GAAS,GAAKA,EAAQF,EAChD,OAAO,EACF,GAAIA,GAAY,GAAKE,GAAS,GAAKA,EAAQF,EAChD,OAAO,EACF,GAAIA,GAAY,EACrB,OAAO,EACF,GAAIC,GAAa,GAAKC,GAAS,EACpC,OAAO,EAELP,GAAa,IACfC,EAActE,EAASc,OAAOuD,GAAWtD,MAEpBsD,GAAa,EAEtC,OAAO,GAGH/C,EAAgBuD,GACfA,GAAiB,SAATA,EAEO,WAATA,EACF,IAEA,IAJA,OAQLzD,EAAgB,CAACX,EAAcqE,EAAsB1B,EAAoBvD,KAC7E,MAAMkF,EAA+B,UAAb3B,GAAwBvD,GAAyC,QAAbuD,IAAuBvD,EACnG,GAAkB,SAAdiF,EAAsB,CACxB,MAAME,EAASD,EAAiBtE,EAAKwE,WAAW/B,QAAQ,KAAOzC,EAAKwE,WAAWC,YAAY,KACrFC,EAASJ,EAAiBtE,EAAKwE,WAAW/B,QAAQ,KAAOzC,EAAKwE,WAAWC,YAAY,KACrFE,EAAOL,EAAiBtE,EAAKwE,WAAW/B,QAAQ,KAAOzC,EAAKwE,WAAWC,YAAY,KACzF,OAAIF,GAAU,GAAKG,GAAU,EAEpBJ,EAAiBM,KAAKC,IAAIN,EAAQG,GAAUE,KAAKE,IAAIP,EAAQG,GAC3DH,GAAU,EACZA,EACEG,GAAU,EACZA,EAEAC,EAGX,OAAIL,GACyC,IAAlCtE,EAAKwE,WAAW/B,QAAQ,KAAczC,EAAKwE,WAAW/B,QAAQ,KAAOzC,EAAKwE,WAAW/B,QAAQ4B,IAEvD,IAAtCrE,EAAKwE,WAAWC,YAAY,KAAczE,EAAKwE,WAAWC,YAAY,KAAOzE,EAAKwE,WAAWC,YAAYJ,IAKtH,2B,QCrbAU,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqB9C,IAAjB+C,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":["../.././src/web/extension.ts","../../external commonjs \"vscode\"","../../webpack/bootstrap","../../webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\r\n\r\ntype QuoteType = \"both\" | \"single\" | \"double\";\r\ntype QuoteChar = \"both\" | `'` | `\"`;\r\ntype Position = \"start\" | \"end\";\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  vscode.workspace.onDidChangeTextDocument(async (e) => {\r\n\r\n    const configuration = vscode.workspace.getConfiguration();\r\n    const quoteType = configuration.get<QuoteType>(\"template-string-converter.quoteType\");\r\n    const enabled = configuration.get<boolean>(\"template-string-converter.enabled\");\r\n    const changes = e.contentChanges[0];\r\n    const validLanguages = configuration.get<string[]>(\"template-string-converter.validLanguages\");\r\n    const addBracketsToProps = configuration.get<boolean>(\"template-string-converter.addBracketsToProps\");\r\n    const removeBackticks = configuration.get<boolean>(\"template-string-converter.autoRemoveTemplateString\");\r\n    const autoClosingBrackets = configuration.get<{}>(\"editor.autoClosingBrackets\");\r\n    const convertOutermostQuotes = configuration.get<boolean>(\"template-string-converter.convertOutermostQuotes\");\r\n    const convertWithinTemplateString = configuration.get<boolean>(\"template-string-converter.convertWithinTemplateString\");\r\n\r\n    if (\r\n      enabled &&\r\n      quoteType &&\r\n      changes &&\r\n      validLanguages?.includes(e.document.languageId)\r\n    ) {\r\n      try {\r\n\r\n        let selections: vscode.Selection[] = [];\r\n        if (!vscode.window.activeTextEditor || vscode.window.activeTextEditor.selections.length === 0) {\r\n          return;\r\n        }\r\n        for (const selection of vscode.window.activeTextEditor.selections) {\r\n          const lineNumber = selection.start.line;\r\n          const currentChar = changes.range.start.character;\r\n          const lineText = e.document.lineAt(lineNumber).text;\r\n\r\n          if (currentChar < 1) {\r\n            return;\r\n          }\r\n\r\n          const startPosition = new vscode.Position(lineNumber, currentChar - 1);\r\n          const endPosition = new vscode.Position(lineNumber, currentChar);\r\n\r\n          const startQuoteIndex = getQuoteIndex(lineText.substring(0, currentChar), getQuoteChar(quoteType), 'start', convertOutermostQuotes);\r\n          if (startQuoteIndex < 0) {\r\n            return;\r\n          }\r\n\r\n          const endQuoteIndex = currentChar + 1 + getQuoteIndex(lineText.substring(currentChar + 1, lineText.length), getQuoteChar(quoteType), 'end', convertOutermostQuotes);\r\n\r\n          const textInString = lineText.slice(startQuoteIndex + 1, endQuoteIndex);\r\n\r\n          const startQuotePosition = new vscode.Position(lineNumber, startQuoteIndex);\r\n          const endQuotePosition = new vscode.Position(lineNumber, endQuoteIndex);\r\n\r\n          const priorChar = e.document.getText(new vscode.Range(startPosition, endPosition));\r\n          const nextChar = e.document.getText(new vscode.Range(startPosition.translate(0, 2), endPosition.translate(0, 2)));\r\n          const nextTwoChars = e.document.getText(new vscode.Range(startPosition.translate(0, 2), endPosition.translate(0, 3)));\r\n\r\n          if (\r\n            notAComment(lineText, currentChar, startQuoteIndex, endQuoteIndex) &&\r\n            lineText.charAt(startQuoteIndex) === lineText.charAt(endQuoteIndex)\r\n          ) {\r\n\r\n            const regex = new RegExp(/<\\/?(?:[\\w.:-]+\\s*(?:\\s+(?:[\\w.:$-]+(?:=(?:\"(?:\\\\[^]|[^\\\\\"])*\"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'\">=]+|\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])+\\}))?|\\{\\s*\\.{3}\\s*[a-z_$][\\w$]*(?:\\.[a-z_$][\\w$]*)*\\s*\\}))*\\s*\\/?)?>/gm);\r\n\r\n            // keep the search reasonable\r\n            const startLine = lineNumber > 20 ? lineNumber - 20 : 0;\r\n            const endLine = e.document.lineCount - lineNumber > 20 ? lineNumber + 20 : e.document.lineCount;\r\n\r\n            const multiLineText = e.document.getText(new vscode.Range(startLine, 0, endLine, 200));\r\n\r\n            const matches = multiLineText.match(regex);\r\n\r\n            if (withinBackticks(lineText, currentChar, lineNumber, e.document, convertWithinTemplateString ?? true) \r\n              && !textInString.includes('${') \r\n              && removeBackticks \r\n              && !changes.text) {\r\n              const edit = new vscode.WorkspaceEdit();\r\n\r\n              edit.replace(\r\n                e.document.uri,\r\n                new vscode.Range(\r\n                  startQuotePosition,\r\n                  startQuotePosition.translate(undefined, 1)\r\n                ),\r\n                quoteType === 'single' ? '\\'' : '\"',\r\n              );\r\n\r\n              edit.replace(\r\n                e.document.uri,\r\n                new vscode.Range(\r\n                  endQuotePosition,\r\n                  endQuotePosition.translate(undefined, 1)\r\n                ),\r\n                quoteType === 'single' ? '\\'' : '\"',\r\n              );\r\n\r\n              await vscode.workspace.applyEdit(edit);\r\n\r\n              if (textInString.indexOf('$') === textInString.length - 1) {\r\n                const editor = vscode.window.activeTextEditor;\r\n\r\n                if (!editor) {\r\n                  return;\r\n                }\r\n\r\n                const position = editor.selection.active;\r\n                const newPosition = position.with(position.line, startQuoteIndex + textInString.length + 1);\r\n                const newSelection = new vscode.Selection(newPosition, newPosition);\r\n\r\n                editor.selection = newSelection;\r\n              }\r\n\r\n              return;\r\n            }\r\n\r\n            if (matches !== null && addBracketsToProps) {\r\n              if (changes.text === \"{\" && priorChar === \"$\") {\r\n                const edit = new vscode.WorkspaceEdit();\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    startQuotePosition,\r\n                    startQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"{\"\r\n                );\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    endQuotePosition,\r\n                    endQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"}\"\r\n                );\r\n                edit.insert(\r\n                  e.document.uri,\r\n                  new vscode.Position(lineNumber, currentChar + 1),\r\n                  '}'\r\n                );\r\n                edit.insert(\r\n                  e.document.uri,\r\n                  new vscode.Position(lineNumber, endQuoteIndex),\r\n                  \"`\"\r\n                );\r\n                edit.insert(\r\n                  e.document.uri,\r\n                  new vscode.Position(lineNumber, startQuoteIndex + 1),\r\n                  \"`\"\r\n                );\r\n                await vscode.workspace.applyEdit(edit);\r\n                selections.push(new vscode.Selection(\r\n                  lineNumber,\r\n                  currentChar + 2,\r\n                  lineNumber,\r\n                  currentChar + 2\r\n                ));\r\n              } else if (changes.text === \"{}\" && priorChar === \"$\") {\r\n                const edit = new vscode.WorkspaceEdit();\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    startQuotePosition,\r\n                    startQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"{\"\r\n                );\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    endQuotePosition,\r\n                    endQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"}\"\r\n                );\r\n                edit.insert(\r\n                  e.document.uri,\r\n                  new vscode.Position(lineNumber, endQuoteIndex),\r\n                  \"`\"\r\n                );\r\n                edit.insert(\r\n                  e.document.uri,\r\n                  new vscode.Position(lineNumber, startQuoteIndex + 1),\r\n                  \"`\"\r\n                );\r\n                await vscode.workspace.applyEdit(edit);\r\n                selections.push(new vscode.Selection(\r\n                  lineNumber,\r\n                  currentChar + 2,\r\n                  lineNumber,\r\n                  currentChar + 2\r\n                ));\r\n              }\r\n            } else if (\r\n              !withinBackticks(lineText, currentChar, lineNumber, e.document, convertWithinTemplateString ?? true)\r\n            ) {\r\n              if (changes.text === \"{}\" && priorChar === \"$\" && (currentChar < 2 || (lineText.charAt(currentChar - 2) !== \"\\\\\"))) {\r\n                const edit = new vscode.WorkspaceEdit();\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    startQuotePosition,\r\n                    startQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    endQuotePosition,\r\n                    endQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                await vscode.workspace.applyEdit(edit);\r\n                selections.push(new vscode.Selection(\r\n                  lineNumber,\r\n                  currentChar + 1,\r\n                  lineNumber,\r\n                  currentChar + 1\r\n                ));\r\n              } else if (changes.text === \"{\" && priorChar === \"$\" && autoClosingBrackets !== 'never' && (currentChar < 2 || (lineText.charAt(currentChar - 2) !== \"\\\\\"))) {\r\n                const edit = new vscode.WorkspaceEdit();\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    startQuotePosition,\r\n                    startQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                edit.insert(\r\n                  e.document.uri,\r\n                  endPosition.translate(undefined, 1),\r\n                  \"}\"\r\n                );\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    endQuotePosition,\r\n                    endQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                await vscode.workspace.applyEdit(edit);\r\n                selections.push(new vscode.Selection(\r\n                  lineNumber,\r\n                  currentChar + 1,\r\n                  lineNumber,\r\n                  currentChar + 1\r\n                ));\r\n              } else if (autoClosingBrackets === 'never' && priorChar === '$' && changes.text === '{' && (currentChar < 2 || (lineText.charAt(currentChar - 2) !== \"\\\\\"))) {\r\n                const edit = new vscode.WorkspaceEdit();\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    startQuotePosition,\r\n                    startQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    endQuotePosition,\r\n                    endQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                await vscode.workspace.applyEdit(edit);\r\n                selections.push(new vscode.Selection(\r\n                  lineNumber,\r\n                  currentChar + 1,\r\n                  lineNumber,\r\n                  currentChar + 1\r\n                ));\r\n              } else if (changes.text === '$' && nextTwoChars === '{}' && (currentChar < 1 || (lineText.charAt(currentChar - 1) !== \"\\\\\"))) {\r\n                const edit = new vscode.WorkspaceEdit();\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    startQuotePosition,\r\n                    startQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    endQuotePosition,\r\n                    endQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                await vscode.workspace.applyEdit(edit);\r\n                selections.push(new vscode.Selection(\r\n                  lineNumber,\r\n                  currentChar + 2,\r\n                  lineNumber,\r\n                  currentChar + 2\r\n                ));\r\n              } else if (changes.text === '$' && nextChar === '{' && autoClosingBrackets !== 'never' && (currentChar < 1 || (lineText.charAt(currentChar - 1) !== \"\\\\\"))) {\r\n                const edit = new vscode.WorkspaceEdit();\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    startQuotePosition,\r\n                    startQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                edit.insert(\r\n                  e.document.uri,\r\n                  endPosition.translate(undefined, 2),\r\n                  \"}\"\r\n                );\r\n                edit.replace(\r\n                  e.document.uri,\r\n                  new vscode.Range(\r\n                    endQuotePosition,\r\n                    endQuotePosition.translate(undefined, 1)\r\n                  ),\r\n                  \"`\"\r\n                );\r\n                await vscode.workspace.applyEdit(edit);\r\n                selections.push(new vscode.Selection(\r\n                  lineNumber,\r\n                  currentChar + 2,\r\n                  lineNumber,\r\n                  currentChar + 2\r\n                ));\r\n              }\r\n            }\r\n          }\r\n        }\r\n        if (vscode.window.activeTextEditor && selections.length > 0) {\r\n          vscode.window.activeTextEditor.selections = selections;\r\n        }\r\n      } catch { }\r\n    }\r\n  });\r\n}\r\n\r\nconst notAComment = (line: string, charIndex: number, startQuoteIndex: number, endquoteIndex: number) => {\r\n  if (line.substring(0, charIndex).includes(\"//\")) {\r\n    return line.substring(0, charIndex).indexOf(\"//\") > startQuoteIndex && line.substring(0, charIndex).indexOf(\"//\") < endquoteIndex;\r\n  } else {\r\n    return true;\r\n  }\r\n};\r\n\r\nconst withinBackticks = (line: string, currentCharIndex: number, cursorLine: number, document: vscode.TextDocument, convertWithinTemplateString: boolean) => {\r\n  const withinLine = line.substring(0, currentCharIndex).includes(\"`\") && line.substring(currentCharIndex, line.length).includes(\"`\");\r\n  if (withinLine) {\r\n    const startIndex = line.substring(0, currentCharIndex).indexOf(\"`\");\r\n    const endIndex = currentCharIndex + line.substring(currentCharIndex, line.length).indexOf(\"`\");\r\n    const startBracketIndex = line.substring(0, currentCharIndex).indexOf('${');\r\n    const endBracketIndex = currentCharIndex + line.substring(currentCharIndex, line.length).indexOf(\"}\");\r\n    if (convertWithinTemplateString && startBracketIndex >= 0 && endBracketIndex > 0) {\r\n      return startIndex >= startBracketIndex && endIndex <= endBracketIndex;\r\n    }\r\n    return withinLine;\r\n  } else {\r\n    const lineIndex = cursorLine;\r\n    const currentLine = document.lineAt(lineIndex).text;\r\n    const startOfLine = currentLine.substring(0, currentCharIndex);\r\n    const endOfLine = currentLine.substring(currentCharIndex, line.length);\r\n    return hasBacktick(lineIndex, startOfLine, document, 'start') && hasBacktick(lineIndex, endOfLine, document, 'end');\r\n  }\r\n};\r\n\r\nconst hasBacktick = (lineIndex: number, currentLine: string, document: vscode.TextDocument, position: Position) => {\r\n  if (position = 'start') {\r\n    lineIndex -= 1;\r\n  }\r\n  while (position === 'start' ? lineIndex >= 0 : lineIndex < document.lineCount) {\r\n    const backTick = currentLine.indexOf(\"`\");\r\n    const semiColon = currentLine.indexOf(\";\");\r\n    const comma = currentLine.indexOf(\",\");\r\n    if (backTick >= 0 && semiColon >= 0 && semiColon < backTick) {\r\n      return true;\r\n    } else if (backTick >= 0 && semiColon >= 0 && semiColon > backTick) {\r\n      return false;\r\n    } else if (backTick >= 0 && comma >= 0 && comma < backTick) {\r\n      return true;\r\n    } else if (backTick >= 0 && comma >= 0 && comma > backTick) {\r\n      return false;\r\n    } else if (backTick >= 0) {\r\n      return true;\r\n    } else if (semiColon >= 0 || comma >= 0) {\r\n      return false;\r\n    }\r\n    if (lineIndex > -1) {\r\n      currentLine = document.lineAt(lineIndex).text;\r\n    }\r\n    position === 'start' ? lineIndex -= 1 : lineIndex += 1;;\r\n  }\r\n  return false;\r\n};\r\n\r\nconst getQuoteChar = (type: QuoteType): QuoteChar => {\r\n  if (!type || type === \"both\") {\r\n    return \"both\";\r\n  } else if (type === \"single\") {\r\n    return \"'\";\r\n  } else {\r\n    return '\"';\r\n  }\r\n};\r\n\r\nconst getQuoteIndex = (line: string, quoteChar: QuoteChar, position: Position, convertOutermostQuotes?: boolean): number => {\r\n  const findFirstIndex = (position === 'start' && convertOutermostQuotes) || (position === 'end' && !convertOutermostQuotes);\r\n  if (quoteChar === \"both\") {\r\n    const double = findFirstIndex ? line.toString().indexOf('\"') : line.toString().lastIndexOf('\"');\r\n    const single = findFirstIndex ? line.toString().indexOf(\"'\") : line.toString().lastIndexOf(\"'\");\r\n    const back = findFirstIndex ? line.toString().indexOf('`') : line.toString().lastIndexOf(\"`\");\r\n    if (double >= 0 && single >= 0) {\r\n      // nested quotes\r\n      return findFirstIndex ? Math.min(double, single) : Math.max(double, single);\r\n    } else if (double >= 0) {\r\n      return double;\r\n    } else if (single >= 0) {\r\n      return single;\r\n    } else {\r\n      return back;\r\n    }\r\n  } else {\r\n  if (findFirstIndex) {\r\n      return line.toString().indexOf('`') !== -1 ? line.toString().indexOf('`') : line.toString().indexOf(quoteChar);\r\n    } else {\r\n      return line.toString().lastIndexOf('`') !== -1 ? line.toString().lastIndexOf('`') : line.toString().lastIndexOf(quoteChar);\r\n    }\r\n  }\r\n};\r\n\r\nexport function deactivate() { }","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(236);\n"],"names":["context","vscode","workspace","onDidChangeTextDocument","e","configuration","getConfiguration","quoteType","get","enabled","changes","contentChanges","validLanguages","addBracketsToProps","removeBackticks","autoClosingBrackets","convertOutermostQuotes","convertWithinTemplateString","includes","document","languageId","selections","window","activeTextEditor","length","selection","lineNumber","start","line","currentChar","range","character","lineText","lineAt","text","startPosition","Position","endPosition","startQuoteIndex","getQuoteIndex","substring","getQuoteChar","endQuoteIndex","textInString","slice","startQuotePosition","endQuotePosition","priorChar","getText","Range","nextChar","translate","nextTwoChars","notAComment","charAt","regex","RegExp","startLine","endLine","lineCount","matches","match","withinBackticks","edit","WorkspaceEdit","replace","uri","undefined","applyEdit","indexOf","editor","position","active","newPosition","with","newSelection","Selection","insert","push","charIndex","endquoteIndex","currentCharIndex","cursorLine","withinLine","startIndex","endIndex","startBracketIndex","endBracketIndex","lineIndex","currentLine","startOfLine","endOfLine","hasBacktick","backTick","semiColon","comma","type","quoteChar","findFirstIndex","double","toString","lastIndexOf","single","back","Math","min","max","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}